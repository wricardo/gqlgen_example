// Code generated by mockery v2.10.0. DO NOT EDIT.

package mock_gqlgen_example

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/wricardo/gqlgen_example/internal/gqlgen_example/model"
)

// OrganizationResolver is an autogenerated mock type for the OrganizationResolver type
type OrganizationResolver struct {
	mock.Mock
}

type OrganizationResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *OrganizationResolver) EXPECT() *OrganizationResolver_Expecter {
	return &OrganizationResolver_Expecter{mock: &_m.Mock}
}

// CreatedBy provides a mock function with given fields: ctx, obj
func (_m *OrganizationResolver) CreatedBy(ctx context.Context, obj *model.Organization) (*model.User, error) {
	ret := _m.Called(ctx, obj)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, *model.Organization) *model.User); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Organization) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationResolver_CreatedBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatedBy'
type OrganizationResolver_CreatedBy_Call struct {
	*mock.Call
}

// CreatedBy is a helper method to define mock.On call
//  - ctx context.Context
//  - obj *model.Organization
func (_e *OrganizationResolver_Expecter) CreatedBy(ctx interface{}, obj interface{}) *OrganizationResolver_CreatedBy_Call {
	return &OrganizationResolver_CreatedBy_Call{Call: _e.mock.On("CreatedBy", ctx, obj)}
}

func (_c *OrganizationResolver_CreatedBy_Call) Run(run func(ctx context.Context, obj *model.Organization)) *OrganizationResolver_CreatedBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Organization))
	})
	return _c
}

func (_c *OrganizationResolver_CreatedBy_Call) Return(_a0 *model.User, _a1 error) *OrganizationResolver_CreatedBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdatedBy provides a mock function with given fields: ctx, obj
func (_m *OrganizationResolver) UpdatedBy(ctx context.Context, obj *model.Organization) (*model.User, error) {
	ret := _m.Called(ctx, obj)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, *model.Organization) *model.User); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Organization) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationResolver_UpdatedBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatedBy'
type OrganizationResolver_UpdatedBy_Call struct {
	*mock.Call
}

// UpdatedBy is a helper method to define mock.On call
//  - ctx context.Context
//  - obj *model.Organization
func (_e *OrganizationResolver_Expecter) UpdatedBy(ctx interface{}, obj interface{}) *OrganizationResolver_UpdatedBy_Call {
	return &OrganizationResolver_UpdatedBy_Call{Call: _e.mock.On("UpdatedBy", ctx, obj)}
}

func (_c *OrganizationResolver_UpdatedBy_Call) Run(run func(ctx context.Context, obj *model.Organization)) *OrganizationResolver_UpdatedBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Organization))
	})
	return _c
}

func (_c *OrganizationResolver_UpdatedBy_Call) Return(_a0 *model.User, _a1 error) *OrganizationResolver_UpdatedBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
