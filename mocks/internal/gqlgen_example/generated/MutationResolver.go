// Code generated by mockery v2.10.0. DO NOT EDIT.

package mock_gqlgen_example

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/wricardo/gqlgen_example/internal/gqlgen_example/model"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

type MutationResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MutationResolver) EXPECT() *MutationResolver_Expecter {
	return &MutationResolver_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (bool, error) {
	ret := _m.Called(ctx, input)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateUserInput) bool); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.CreateUserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutationResolver_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MutationResolver_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - input model.CreateUserInput
func (_e *MutationResolver_Expecter) CreateUser(ctx interface{}, input interface{}) *MutationResolver_CreateUser_Call {
	return &MutationResolver_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, input)}
}

func (_c *MutationResolver_CreateUser_Call) Run(run func(ctx context.Context, input model.CreateUserInput)) *MutationResolver_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateUserInput))
	})
	return _c
}

func (_c *MutationResolver_CreateUser_Call) Return(_a0 bool, _a1 error) *MutationResolver_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Healthcheck provides a mock function with given fields: ctx, input
func (_m *MutationResolver) Healthcheck(ctx context.Context, input string) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutationResolver_Healthcheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Healthcheck'
type MutationResolver_Healthcheck_Call struct {
	*mock.Call
}

// Healthcheck is a helper method to define mock.On call
//  - ctx context.Context
//  - input string
func (_e *MutationResolver_Expecter) Healthcheck(ctx interface{}, input interface{}) *MutationResolver_Healthcheck_Call {
	return &MutationResolver_Healthcheck_Call{Call: _e.mock.On("Healthcheck", ctx, input)}
}

func (_c *MutationResolver_Healthcheck_Call) Run(run func(ctx context.Context, input string)) *MutationResolver_Healthcheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MutationResolver_Healthcheck_Call) Return(_a0 string, _a1 error) *MutationResolver_Healthcheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
